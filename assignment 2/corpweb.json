{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters": {
      "InstanceType": {
        "Description": "Server instance type",
        "Type": "String",
        "Default": "t2.micro",
        "AllowedValues": [
          "t2.micro",
          "t2.small"
        ],
        "ConstraintDescription": "Must be a valid EC2 type."
      },
      "KeyPair": {
        "Description" : "Amazon EC2 Key Pair",
        "Type" : "AWS::EC2::KeyPair::KeyName"
      },
      "YourIP": {
        "Description": "Specified IPAddress of user in CIDR Notation",
        "Type": "String"
      }
    },
    "Resources": {
      "EngineeringVpc": {
        "Type": "AWS::EC2::VPC",
        "Properties": {
          "EnableDnsSupport": "true",
          "EnableDnsHostnames": "true",
          "CidrBlock": "10.0.0.0/18",
          "Tags": [
            {
              "Key": "Environment",
              "Value": "Test"
            }
          ]
        }
      },
  
      "InternetGateway": {
        "Type": "AWS::EC2::InternetGateway",
        "Properties": {}
      },
      "VPCGatewayAttachment": {
        "Type": "AWS::EC2::VPCGatewayAttachment",
        "Properties": {
          "InternetGatewayId": {
            "Ref": "InternetGateway"
          },
          "VpcId": {
            "Ref": "EngineeringVpc"
          }
        }
      },
      "PublicRouteTable": {
        "Type": "AWS::EC2::RouteTable",
        "Properties": {
          "VpcId": {
            "Ref": "EngineeringVpc"
          }
        }
      },
      "PublicRoute": {
        "Type": "AWS::EC2::Route",
        "Properties": {
          "DestinationCidrBlock": "0.0.0.0/0",
          "RouteTableId": {
            "Ref": "PublicRouteTable"
          },
          "GatewayId": {
            "Ref": "InternetGateway"
          }
        },
        "DependsOn": [
          "InternetGateway"
        ]
      },
      "PublicSubnet1": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "VpcId": {
              "Ref": "EngineeringVpc"
          },
          "MapPublicIpOnLaunch" : "true",
          "CidrBlock": "10.0.0.0/24",
          "AvailabilityZone" : {
            "Fn::Select" : [ "0", { "Fn::GetAZs" : { "Ref" : "AWS::Region" }}]
          },
          "Tags" : [
            { "Key": "Name",
              "Value": "Website-Public-Subnet1"
            }
          ]
        }
      },
      "PublicSubnet2": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "VpcId": {
              "Ref": "EngineeringVpc"
          },
          "MapPublicIpOnLaunch" : "true",
          "CidrBlock": "10.0.1.0/24",
          "AvailabilityZone" : {
            "Fn::Select" : [ "0", { "Fn::GetAZs" : { "Ref" : "AWS::Region" }}]
          },
          "Tags" : [
            { "Key": "Name",
              "Value": "Website-Public-Subnet2"
            }
          ]
        }
      },
      "PublicSubnet1RTassoc": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "RouteTableId": {
            "Ref": "PublicRouteTable"
          },
          "SubnetId": {
            "Ref": "PublicSubnet1"
          }
        }
      },
      "web1": {
        "Type": "AWS::EC2::Instance",
        "Properties" : {
          "InstanceType": {"Ref": "InstanceType"},
          "ImageId": "ami-01cc34ab2709337aa",
          "KeyPair": { "Ref": "KeyPair"},
          "SubnetId": { "Ref": "PublicSubnet1" },
          "SecurityGroupIds": [
            { "Ref": "WebserverSG"}
          ],
          "Tags" : [
            { "Key": "Name",
              "Value": "web1"
            }
          ],
          "Fn::Base64": {
            "Fn::Join":["", [
                "#!/bin/bash\n",
                "yum update -y\n",
                "yum install -y git httpd php\n",
                "service httpd start\n",
                "chkconfig httpd on\n",
                "aws s3 cp s3://seis665-public/index.php /var/www/html/"
            ]]
        }
        }
      },
      "web2": {
        "Type": "AWS::EC2::Instance",
        "Properties" : {
          "InstanceType": {"Ref": "InstanceType"},
          "ImageId": "ami-01cc34ab2709337aa",
          "KeyPair": { "Ref": "KeyPair"},
          "SubnetId": { "Ref": "PublicSubnet2" },
          "SecurityGroupIds": [
            { "Ref": "WebserverSG"}
          ],
          "Tags" : [
            { "Key": "Name",
              "Value": "web2"
            }
          ],
          "UserData": {
            "Fn::Base64": {
                "Fn::Join":["", [
                    "#!/bin/bash\n",
                    "yum update -y\n",
                    "yum install -y git httpd php\n",
                    "service httpd start\n",
                    "chkconfig httpd on\n",
                    "aws s3 cp s3://seis665-public/index.php /var/www/html/"
                ]]
            }
          }
        }
      },
      "WebserverSG": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
          "VpcId": {
              "Ref": "EngineeringVpc"
          },
          "GroupDescription": "Security group rules for webserver host.",
          "SecurityGroupIngress": [
            {
                "IpProtocol": "tcp",
                "FromPort": "22",
                "ToPort": "22",
                "CidrIp": {
                    "Ref": "YourIP"
                }
            },
            {
              "IpProtocol": "tcp",
              "FromPort": "80",
              "ToPort": "80",
              "CidrIp": "0.0.0.0/0"
            }
          ]
        }
      },
      "EngineeringLB": {
        "Type":"AWS::ElasticLoadBalancingV2::LoadBalancer",
        "Properties": {
            "Name": "EngineeringLB",
            "SecurityGroups": {"Ref": "WebserverSG"},
            "Subnets": [{"Ref": "PublicSubnet1"}, {"Ref": "PublicSubnet2"}]
        }
      },
      "EngineeringWebservers": {
        "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
        "Properties" : {
            "HealthCheckEnabled" : true,
            "HealthCheckIntervalSeconds" : 10,
            "HealthCheckPath" : "/",
            "HealthCheckPort" : "80",
            "HealthCheckProtocol" : "HTTP",
            "HealthCheckTimeoutSeconds" : 10,
            "Name" : "EngineeringWebservers",
            "Port" : 80
        }
      }
    },
    "Outputs": {
      "WebUrl": {
        "Value": {
            "Fn::GetAtt": [
                "EngineeringLB",
                "DNSName"
            ]
        },
        "Description": "Elastic Load Balancer DNS name"
      }
    }
  }